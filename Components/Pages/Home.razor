@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Celestial Shield</PageTitle>

@using MudBlazor
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<MudText Typo="Typo.h1" Align="Align.Center"><b>Celestial Shield</b></MudText>

<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top:12px;">
    <MudPaper Elevation="0" Class="pa-4">
    <MudNumericField @bind-value="Velocity" Label="v_inf (km/s)" Placeholder="Relative velocity..." Variant="Variant.Outlined" Class="mt-4" />
    <MudNumericField @bind-value="Magnitude" Label="h (H)" Placeholder="Absolute magnitude..." Variant="Variant.Outlined" Class="mt-4" />
    <MudNumericField @bind-value="Diameter" Label="diameter (km)" Placeholder="Estimate diameter..." Variant="Variant.Outlined" Class="mt-4" />
    <MudNumericField @bind-value="VirtualImpactors" Label="n_imp (integer)" Placeholder="Number of distinct potential impact solutions..." Variant="Variant.Outlined" Class="mt-4" />
    <MudNumericField @bind-value="Mass" Label="mass (kg) (optional)" Placeholder="Estimate mass..." Variant="Variant.Outlined" Class="mt-4" />
    <MudTextField @bind-value="LastObservation" Label="last_obs (UTC YYYY-MM-DD)" Placeholder="Last observation..." Variant="Variant.Outlined" Class="mt-4" />

        <MudButton Variant="Variant.Filled" 
                    Color="Color.Dark" 
                    FullWidth="true" 
                    Class="mt-6" 
                    Size="Size.Large"
                    OnClick="GetResults"> 
            Get Results
        </MudButton>
    </MudPaper>
</MudContainer>

@if (Loading)
{
    <div class="d-flex justify-center mt-4">
        <MudProgressCircular Indeterminate="true" />
    </div>
}
else if (Results != null)
{
    <MudPaper Class="pa-4" Elevation="0">
        <MudTabs Elevation="2" Rounded="true" ApplyEffects="true" PanelClass="pa-6">
            <MudTabPanel Text="Overview">
                <MudGrid Spacing="4">
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Estimate Earth Approach Range</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">@(Results.range)</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Impact Probability</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.h5">@(Results.ip)</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Hazard Class</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">@(Results.hazard_class)</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Rationale</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">@(Results.rationale)</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="Impact">
                <script>
                    async function injectMap(key, lat, lng, rad) {
                        "use strict";
                        const content = document.getElementById('google-maps-container');
                        if (key === null) {
                            alert('missing enviroment varriable: MAPS_API_KEY');
                            return;
                        }
                        const mapsScript =  document.createElement('script');
                        mapsScript.src = 'https://maps.googleapis.com/maps/api/js?key='+key;
                        content.append(mapsScript);
                        await new Promise(resolve => {
                            mapsScript.onload = resolve;
                        })
                        const position = { lat: lat, lng: lng };
                        const { Map } = await window.google.maps.importLibrary("maps");
                        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
                        const mapElement = document.createElement("div");
                        mapElement.style.height = '300px';
                        content.append(mapElement);
                        const map = new Map(mapElement, {
                            zoom: 4,
                            center: position,
                            mapId: "meteorimpactmap",
                        });

                        // The marker, positioned at Uluru
                        const marker = new AdvancedMarkerElement({
                            map: map,
                            position: position,
                            title: "point of impact",
                        });
                        const poly = new google.maps.Circle({
                            fillColor: "#000000",
                            map: map,
                            fillOpacity: 1,
                            center: position,
                            radius: rad
                        });
                    }
                </script>
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Estimate Impact Energy (j)</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.h5">@(ImpactEnergy)</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Estimate Crater Size (km)</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">@(CraterSize)</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="10" md="8" lg="6">
                        <MudCard Elevation="3">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Projected Impact Zone Analysis</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudPaper Height="300px" id="google-maps-container" Class="d-flex align-center justify-center mud-theme-dark">
                                </MudPaper>
                            </MudCardContent>
                            <MudCardActions>
                                <MudNumericField T="double?" Label="longitude" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Lattitude"> </MudNumericField>
                                <MudNumericField T="double?" Label="lattitude" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Longitude"> </MudNumericField>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary">Run Simulation</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="Consequences">
                <MudText Typo="Typo.h4" GutterBottom="true">Environmental Consequences</MudText>
                <MudGrid Spacing="4">
                    <MudItem xs="12" md="4">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Atmosphere</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">Details on the potential for atmospheric dust and aerosol injection, which could lead to an "impact winter" by blocking sunlight and lowering global temperatures.</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Organisms</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">Assessment of the impact on global biodiversity, including potential extinction events, ecosystem collapse, and long-term effects on flora and fauna.</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Geological</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">Analysis of geological consequences, such as mega-tsunamis from ocean impacts, widespread seismic activity, and the potential for increased volcanism.</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="Mitigation">
                <MudGrid Spacing="4">
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Deflection Strategies</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">Primary options include kinetic impactors (like NASA's DART mission), gravity tractors for slow adjustments, and laser ablation to vaporize surface material for thrust.</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Disruption Strategies</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">Higher-risk options for short-notice threats, such as using a standoff nuclear device to fracture the asteroid into smaller, less harmful fragments that would mostly burn up in the atmosphere.</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Mission Readiness & Timelines</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">This section details the current state of readiness for various mitigation technologies. It outlines the minimum lead time required to launch and execute a successful deflection or disruption mission based on the asteroid's trajectory and distance.</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        </MudTabs>

        @* <MudContainer Class="d-flex justify-end mt-6 mb-4">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Secondary" 
                       Size="Size.Large"
                       @onclick="ResetSimulation">
                New Simulation
            </MudButton>
        </MudContainer> *@
    </MudPaper>
}

@code {
    [Microsoft.AspNetCore.Components.Inject]
    public project_celestial_shield.Services.OpenAiService? OpenAi { get; set; }

    [Microsoft.AspNetCore.Components.Inject]
    public Microsoft.Extensions.Logging.ILogger<Home>? Logger { get; set; }

    private project_celestial_shield.Models.Results? Results;
    private bool Loading;
    private string? StatusMessage;

    private double? Velocity { get; set; }
    private double? Magnitude { get; set; }
    private double? Diameter { get; set; }
    private double? VirtualImpactors { get; set; }
    private double? Mass { get; set; }
    private string? LastObservation { get; set; }
    private double? Lattitude { get; set; }
    private double? Longitude { get; set; }

    private async Task injectMap()
    {
        string key = Environment.GetEnvironmentVariable("MAPS_API_KEY");
        await JSRuntime.InvokeVoidAsync("injectMap", key, Lattitude, Longitude, CraterSize*500);
    }
    private async Task GetResults()
    {
        if (OpenAi == null) return;
        Loading = true;
        StatusMessage = "Requesting results...";
        Logger?.LogInformation("Home: Starting GetResults");
        try
        {
            var inputObj = new
            {
                v_inf = Velocity ?? 0,
                h = Magnitude ?? 0,
                diameter = Diameter ?? 0,
                n_imp = VirtualImpactors ?? 0,
                last_obs = LastObservation ?? "",
            };

            var inputJson = JsonSerializer.Serialize(inputObj);

            var userPrompt = $@"
Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
Determine the impact probability, hazard class, and impact range (years)

### Input:
{inputJson}

### Response:
";

            var functionSchema = new
            {
                name = "create_results_profile",
                description = "Return a results object in strict JSON.",
                parameters = new
                {
                    type = "object",
                    properties = new
                    {
                        range = new { type = "text" },
                        ip = new { type = "number" },
                        hazard_class = new { type = "text" },
                        rationale = new { type = "text" },
                    },
                    required = new[] { "range", "ip", "hazard_class", "rationale" }
                }
            };

            Results = await OpenAi.GetStructuredResultAsync<project_celestial_shield.Models.Results>("", userPrompt, functionSchema, model: "qwen3-0.6b-meteor-2.0");
            if (Results != null)
            {
                StatusMessage = "Results received";
                Logger?.LogInformation("Home: Received results: {@Results}", Results);
            }
            else
            {
                StatusMessage = "No results returned";
                Logger?.LogWarning("Home: GetStructuredResultAsync returned null");
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
            Logger?.LogError(ex, "Home: Error getting results");
            throw;
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }

    private double? CalculateMassFromDiameter(double diameter)
    {
        double density = 3000; // Average density in kg/m^3 for stony asteroids

        double volume = (Math.PI / 6.0) * Math.Pow(diameter, 3); // Volume in m^3
        double mass = volume * density; // Mass in kg

        return mass;
    }

    private double? ImpactEnergy => (Mass ?? (Diameter.HasValue ? CalculateMassFromDiameter(Diameter.Value) : null)) is double mass && Velocity.HasValue
            ? 0.5 * mass * Math.Pow(Velocity.Value * 1000, 2)
            : null;
    
    private double? CraterSize => ImpactEnergy.HasValue
        ? Math.Pow(ImpactEnergy.Value, 1.0 / 3.0)
        : null;
}
